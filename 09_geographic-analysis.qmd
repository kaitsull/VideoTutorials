---
title: "Geographic Analysis"
author: "Margarita Kapustina"
format: html
---

::: {style="display: flex; justify-content: space-between; margin-top: 2em;"}
<a href="08_visualization.qmd" class="btn btn-outline-secondary">‚üµ Previous: Visualization</a>
:::

## Video Tutorial

The following video tutorial demonstrates how to perform and visualize a basic geometric analysis in RUHi for your mFISH object. It also demonstrates how to add custom metadata to your mFISH object.

::: {.center}
<iframe src="https://www.youtube.com/embed/F5maif5B-Qo" width="640" height="360" allowfullscreen></iframe>
:::

## Geographic Analysis Tutorial

```{r, include=FALSE}
#load in library
library(RUHi)
library(ggplot2)
myobj= readRDS("demo3.rds")

#adding in modified analyzeDistance code, to take predefined boundary points
analyzeDistance <- function(SectionName,
                            coord_data,
                            boundary_points = NULL,          # New argument for pre-defined points
                            highlight_cluster.1 = NULL,
                            highlight_cluster.2 = NULL,
                            highlight_colour = 'black') {
  
  # Convert x and y to numeric
  cell_data <- coord_data
  cell_data$x <- as.numeric(cell_data$X)
  cell_data$y <- as.numeric(cell_data$Y)
  
  # Plot out the cells in space
  ggplot2::ggplot(cell_data, ggplot2::aes(x = x, y = y, colour = cluster)) +
    ggplot2::geom_point() +
    ggplot2::coord_fixed()  # Set y-axis limits
  
  clusters <- factor(cell_data$cluster)
  colors <- rainbow(length(levels(clusters)))[clusters]  # Generate a color for each cluster
  
  # Optional: Highlight specified clusters in black if they are not NULL
  if (!is.null(highlight_cluster.1)) {
    colors[cell_data$cluster == highlight_cluster.1] <- highlight_colour
  }
  if (!is.null(highlight_cluster.2)) {
    colors[cell_data$cluster == highlight_cluster.2] <- highlight_colour
  }
  
  # Plot cell data with colored clusters
  par(pty="s")
  plot(cell_data$x, cell_data$y, type = "p",
       xlab = "x", ylab = "y", col = colors, pch = 19)
  
  # Interactive point selection or use supplied points
  if (is.null(boundary_points)) {
    message('Please click around 5-15 points to set major landmarks in plot screen...')
    message('Any highlighted clusters are coloured black.')
    message('When done hit ESC on keyboard.')
    points <- locator()  # interactive clicking
  } else {
    points <- boundary_points  # use pre-supplied points (data.frame with x and y)
  }
  points <- as.data.frame(points)
  
  ######### Function to calculate the spline
  calculate_spline <- function(x1, y1, x2, y2, n_points = 100) {
    x_values <- seq(x1, x2, length.out = n_points)
    y_values <- spline(x = c(x1, x2), y = c(y1, y2), xout = x_values)$y
    data.frame(x = x_values, y = y_values)
  }
  
  spline_segments <- list()
  for (i in 1:(nrow(points) - 1)) {
    segment <- calculate_spline(points$x[i], points$y[i], points$x[i + 1], points$y[i + 1])
    spline_segments[[i]] <- segment
  }
  spline_data <- do.call(rbind, spline_segments)
  
  project_point_onto_segment <- function(px, py, x1, y1, x2, y2) {
    dx <- x2 - x1
    dy <- y2 - y1
    t <- ((px - x1) * dx + (py - y1) * dy) / (dx^2 + dy^2)
    t <- pmax(0, pmin(1, t))
    projected_x <- x1 + t * dx
    projected_y <- y1 + t * dy
    signed_distance <- ((x2 - x1)*(py - y1) - (y2 - y1)*(px - x1)) / sqrt(dx^2 + dy^2)
    c(projected_x, projected_y, signed_distance)
  }
  
  distances <- numeric(nrow(cell_data))
  
  par(pty="s")
  plot(cell_data$x, cell_data$y, type = "p", col = "red", pch = 16,
       xlab = "X", ylab = "Y",
       main = "Cell coordinates,\nestimated boundary\n and Distance to boundary")
  mtext("Please note: any new cell coordinates displayed are non-Slc17a7 expressing (cluster ID:NA)",
        side = 1, line = 3.5, cex = 0.9)
  points(spline_data$x, spline_data$y, col = "blue")
  
  for (i in 1:nrow(cell_data)) {
    nearest_index <- which.min((spline_data$x - cell_data$x[i])^2 + (spline_data$y - cell_data$y[i])^2)
    if (nearest_index == 1) {
      projected <- project_point_onto_segment(cell_data$x[i], cell_data$y[i],
                                              spline_data$x[1], spline_data$y[1],
                                              spline_data$x[2], spline_data$y[2])
    } else if (nearest_index == nrow(spline_data)) {
      projected <- project_point_onto_segment(cell_data$x[i], cell_data$y[i],
                                              spline_data$x[nrow(spline_data) - 1], spline_data$y[nrow(spline_data) - 1],
                                              spline_data$x[nrow(spline_data)], spline_data$y[nrow(spline_data)])
    } else {
      projected <- project_point_onto_segment(cell_data$x[i], cell_data$y[i],
                                              spline_data$x[nearest_index - 1], spline_data$y[nearest_index - 1],
                                              spline_data$x[nearest_index], spline_data$y[nearest_index])
    }
    distances[i] <- projected[3]
    segments(projected[1], projected[2], cell_data$x[i], cell_data$y[i], col = "green")
  }
  
  cell_data$distance_to_spline <- -distances
  
  cell_data$normalized_distance_to_spline <- (cell_data$distance_to_spline - min(cell_data$distance_to_spline)) /
    (max(cell_data$distance_to_spline) - min(cell_data$distance_to_spline))
  
  title <- paste0("Color-coded cells by distance to boundary: ", SectionName)
  p2 <- ggplot2::ggplot(cell_data, ggplot2::aes(x = x, y = y)) +
    ggplot2::geom_point(ggplot2::aes(color = distance_to_spline), pch = 16) +
    ggplot2::scale_colour_gradient2(
      low = "red",
      mid = "white",
      high = "blue",
      midpoint = 0) +
    ggplot2::labs(x = "X", y = "Y", title = title, color = "Distance to Boundary") +
    ggplot2::coord_fixed()
  
  filename <- paste0("distancetoBoundary_", SectionName, ".eps")
  ggplot2::ggsave(filename = filename, plot = p2)
  
  title <- paste0("Histogram of distances to the boundary: ", SectionName)
  p_hist2 <- ggplot2::ggplot(cell_data, ggplot2::aes(x = distance_to_spline)) +
    ggplot2::geom_histogram(color = "grey", fill = "gold", bins = 30) +
    ggplot2::labs(x = "Distance to Boundary", y = "Frequency", title = title)
  filename <- paste0("Histogram_distanceToBoundary_", SectionName, ".eps")
  ggplot2::ggsave(filename = filename, plot = p_hist2)
  
  cell_data$distance_along_spline <- numeric(nrow(cell_data))
  
  for (i in 1:nrow(cell_data)) {
    distances <- sqrt((spline_data$x - cell_data$x[i])^2 + (spline_data$y - cell_data$y[i])^2)
    nearest_index <- which.min(distances)
    if (nearest_index == 1) {
      cell_data$distance_along_spline[i] <- 0
    } else {
      cell_data$distance_along_spline[i] <- sum(sqrt(diff(spline_data$x[1:nearest_index])^2 + diff(spline_data$y[1:nearest_index])^2))
    }
  }
  
  cell_data$normalized_distance_along_spline <- (cell_data$distance_along_spline - min(cell_data$distance_along_spline)) /
    (max(cell_data$distance_along_spline) - min(cell_data$distance_along_spline))
  
  title <- paste0("Histogram of distances along the boundary: ", SectionName)
  p_hist <- ggplot2::ggplot(cell_data, ggplot2::aes(x = distance_along_spline)) +
    ggplot2::geom_histogram(color = "grey", fill = "violet", bins = 30) +
    ggplot2::labs(x = "Distance along boundary", y = "Frequency", title = title)
  filename <- paste0("Histogram_distanceAlongBoundary_", SectionName, ".eps")
  ggplot2::ggsave(filename = filename, plot = p_hist)
  
  my_palette <- grDevices::colorRampPalette(c("red", "blue"))(nrow(cell_data))
  title <- paste0("Color-coded cells by distance along boundary: ", SectionName)
  p3 <- ggplot2::ggplot(cell_data, ggplot2::aes(x = x, y = y)) +
    ggplot2::geom_point(ggplot2::aes(color = distance_along_spline), pch = 16) +
    ggplot2::scale_color_gradientn(colors = my_palette) +
    ggplot2::labs(x = "X", y = "Y", title = title, color = "Distance along Boundary") +
    ggplot2::coord_fixed()
  filename <- paste0("distanceAlongBoundary_", SectionName, ".eps")
  ggplot2::ggsave(filename = filename, plot = p3)
  
  uniqueSection_name <- paste(SectionName, "data", sep = "")
  assign(uniqueSection_name, cell_data, envir = .GlobalEnv)
  
  message('Name this file as:')
  print(uniqueSection_name)
  
  colnames(cell_data)[colnames(cell_data) == "distance_to_spline"] <- "distance_to_boundary"
  colnames(cell_data)[colnames(cell_data) == "normalized_distance_to_spline"] <- "normalized_distance_to_boundary"
  colnames(cell_data)[colnames(cell_data) == "distance_along_spline"] <- "distance_along_boundary"
  colnames(cell_data)[colnames(cell_data) == "normalized_distance_along_spline"] <- "normalized_distance_along_boundary"
  
  return(cell_data)
}
```
##### Load additional libraries for creating polished plots
```{r} 
#| eval: false
# To get started, load the ggplot2 and scales packages
# note: if you get "Error in library(...) : there is no package called" 
# please install the packages first!
library(ggplot2)
library(scales)
```

#### Extracting cell spatial coordinates with `getCoords()`
Get cell coordinates, cluster ID and metadata information from an mFISH object, and optionally rotate cell XY coordinates.

>This function will return a dataframe with XY coordinates, cell ID, cluster ID, and metadata (anum, etc.) for a single mFISH object section. If rotate_coords = TRUE, the adjusted XY coordinates will be stored in your dataframe output, and visualized in the plot. 

*Note: cluster `NA` are cells that were not filtered based on your specified PAC threshold upon creating the mFISH class object, and running `ruFilter()`.*

```{r}
# Optionally rotate your section coordinates by specifying: 
# rotate_coords = TRUE, and your desired rotation with theta_deg = 90. 
# (Example: coordsSection_1 <- getCoords(myobj, section_id = "1", rotate_coords = TRUE, theta_deg = 90)
coordsSection_1 <- getCoords(original_mfish_obj = myobj, section_id = "1", rotate_coords = F)
```
#### Perform geometric analysis with `analyzeDistance()`
Calculate the distance along and away from a user-defined boundary using mFISH cell coordinates. This is used to investigate spatial relationships between cells. This can be performed to identify cell distances away from a unique ROI, a nucleus edge, distance from white matter or pial surface, etc! 

Once you run this function, your section's cells will be plotted in space coloured according to cluster. You will be prompted to point-and-click your landmarks to define your boundary. Once this is completed, directly hit the `ESC` key on your keyboard.  

The final output of this function is a dataframe with cell ID, coordinates, cluster ID, distance along and distance away from your defined boundary. Distance metrics are available as raw (microns) and normalized (0-1) outputs. See below for details.

> Running this function will compute 4 metrics:`distance_to_boundary`, `distance_along_boundary`, `normalized_distance_to_boundary` & `normalized_distance_along_boundary`. (Normalized to the range of distances along/to the boundary *per section*; values will range from 0‚Äì1).  

> It will also save 4 plots in your working directory:  
1. Histogram of distances **to** boundary  
2. Histogram of distances **along** boundary  
3. Cell IDs in section, color-coded by **distance to boundary**  
4. Cell IDs in section, color-coded by **distance along boundary**
```{r}
#| eval: false
# You can also specify which cluster numbers to highlight 
# and specify the highlight colour. The default colour is black. 
# (Example: section1data <- analyzeDistance("section1", coordsSection_1, highlight_cluster.1 = 1, highlight_cluster.2 = 2, highlight_colour = 'black')
section1data <- analyzeDistance("section1", coordsSection_1)
#### To change plot save location: update your working directory using setwd('path/to/folder') ####
```


![](images/v4analyzeDistance.gif)
 
```{r}
#| echo: false
#| fig.show: "hide" #run as for static qmd (non-interactive version of function)
boundary_points <- data.frame(
  x = c(373.0895, 263.9015, 235.5935, 265.9235, 375.1115, 595.5097, 666.2797, 639.9937, 621.7957, 567.2017, 391.2876),
  y = c(1064.44534, 821.19974, 545.52141, 337.41129, 53.62476, 50.92203, 472.54773, 702.27968, 850.92976, 1059.03988, 1061.74261))

section1data <- analyzeDistance("section1", coordsSection_1, boundary_points = boundary_points)
```

#### Optional for polished plots: perform custom normalization, and visualize geometric analysis results using `ggplot()`

```{r}
#### These steps can be skipped depending on analysis needs ####
# For a core/shell analysis, shift distance_to_boundary
# values so that the minimum value becomes zero. This simplifies the distance to centre
# values for further visualizations.
section1data$distance_to_centre <- section1data$distance_to_boundary - 
  min(section1data$distance_to_boundary)

# Plot the cells in the section, coloured by distance_to_centre values
ggplot(section1data, aes(x = x, y = y, col = distance_to_centre)) +
  geom_point() +
  scale_color_viridis_c() +  
  theme_minimal()

# You can also adjust legend colour limits, flip to match the raw 
# confocal microscopy image, and fix the aspect ratio for a polished plot.
ggplot(section1data, aes(x = x, y = y, col = distance_to_centre)) +
  geom_point() +
  scale_color_viridis_c(
    limits = c(0, 350),      
    oob = scales::squish) +
    theme_minimal()+
    scale_y_reverse()+
    coord_fixed()

# Create boxplots displaying distance to centre data grouped by cluster ID
ggplot(section1data, aes(x = factor(cluster), y = distance_to_centre, fill = factor(cluster))) +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Cluster ID", y = "Distance to boundary")+
  theme_minimal()
```

#### Optional step for data with multiple sections: merge section data together using `rbind()`

```{r}
#| eval: false
#### Only needed if you have multiple sections ####
allSectionData <- rbind(section2data, section3data)
```

#### Add geometric analysis output (or any custom metadata) back to a class mFISH object using `metaAdd()`

Metadata is added based on matching cell IDs. For cells without corresponding metadata (e.g., when metadata applies to only a subset of cells), the associated values will be stored as `myobj@metaData$variable = NA`.

```{r}
myobj <- metaAdd(mfish_object = myobj,
                 metadata_to_add = section1data,
                 metadata_variables_to_add = "distance_to_centre")
```
*Note:* If you are updating or overwriting existing metadata currently stored in an mfish object, first clear the metadata slot: `myobj@metaData$distance_to_centre = NULL` and then add metadata with the code above.

#### Visualize our mFISH data UMAP coloured by geometric analysis metadata using `plotDim()`
```{r}
plotDim(myobj, colour.by = 'distance_to_centre')

# Optionally: change the colour scale for a polished plot:
plotDim(myobj, colour.by = 'distance_to_centre') +
  coord_fixed() +
  scale_colour_viridis_c(limits = c(0, 350), oob = scales::squish)
```
## Visualize our mFISH cells coloured by geometric analysis metadata using `plotSpace()`
```{r}
plotSpace(myobj, colour.by = "distance_to_centre")
```

::: {style="display: flex; justify-content: space-between; margin-top: 2em;"}
<a href="08_visualization.qmd" class="btn btn-outline-secondary">‚üµ Previous: Visualization</a>
:::
